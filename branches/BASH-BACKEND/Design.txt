New User Registration
New user registration is a 4 phase process.
1. Submit-registration.php (or anything else) creates a file in temp_web with the name "registration_request-<random alphanumeric characters>". It will put one line in the file with the format "<Requested name>,<ip address>". The file must be readable to the backend user. This may mean being group readable if temp_web is SGID.
2. The process_registration script will wake up periodically (once a second?) and scan temp_web for any files with that kind of name and that contain a line of that type. It will try to add a user for them in users.txt. It will then create a new file if one doesn't exist with the name "registration_status-<same characters as request>". It will fill that file with a single line of the format "<status code>,<message>,<user id>". It will delete the original file. It will also write an appropriate entry to the main log file. The registration_status file must be readable to the web server user. This may mean being world readable. As it may contain sensitive information, we depend on the random characters and lack of anyone being able to list the contents of temp_web to prevent anyone from being able to read it. It should not be writeable by anyone other than the backend user to minimize damage if anyone does get the file name.
3. When the php script reads the returned information, it will create a file with the name "registration_done-<same characters>". The contents don't matter (it can be empty).
4. If process_registration finds any files of this form during a scan, it can delete "(registration_request|registration_status|registration_done)-<those characters>".

File Submission
Web script puts a file in temp_web with a name "submission-<user id>-<time>-Problem<number>-<random chars>.ext". When the manager script wakes up to process submissions, it does the following to any such files it finds:
-chown <build user>:<build user>
-chmod 400
-mv to submissions directory and strip out the "-<random chars>"
-Put an entry for the file in queue
Then for each entry in the queue:
* Deletes manager/testing/.
* Copies the file (*?) into testing/build/.
* Copies the appropriate test cases into testing/cases.
* Builds the program logging the process to log/compiles/<filename (without extension?)>.log.
* Run the test cases on the resulting program using the appropriate security mechanism.
* Writes to logs/log (and ouputs) a line "time,id,name,problem #,status,message" where status and message are one of:
  0:  <Test case basename>- Success
  2:  <Test case basename>- Ouput not as expected
  4:  <Test case basename>- Program crashed
  3:  <Test case basename>- Program timed out
  15: <Test case basename>- Unknown error
-Once all the entries in the queue have been processed, they are moved to finished and queue is deleted.

The manager script also copies anything from temp_web/manager.log into logs/manager.log and removes the temp one.
